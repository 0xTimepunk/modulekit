ColdStorageHook::onInstall
├── when module is intialized
│   └── it should revert
└── when module is not intialized
    ├── when the owner is 0
    │   └── it should revert
    └── when the owner is not 0
        ├── when the waitPeriod is 0
        │   └── it should revert
        └── when the waitPeriod is not 0
            ├── it should set the waitPeriod
            └── it should set the owner
     

ColdStorageHook::onUninstall
└── it should remove the config


ColdStorageHook::isInitialized
├── when module is not intialized
│   └── it should return false
└── when module is intialized
    └── it should return true


ColdStorageHook::setWaitPeriod
├── when module is not intialized
│   └── it should revert
└── when module is intialized
    ├── when waitPeriod is 0
    │   └── it should revert
    └── when waitPeriod is not 0
        └── it should set the waitPeriod


ColdStorageHook::checkHash
├── when the hash is not valid
│   └── it should return entry 0
└── when the hash is valid
    ├── it should return the execution hash
    └── it should return the entry


ColdStorageHook::requestTimelockedExecution
├── when calldata length is not 0
│   ├── when the receiver is not the owner
│   │   ├── when the call is not to setWaitPeriod
│   │   │   └── it should revert
│   │   └── when the call is to setWaitPeriod
│   │       ├── it should store the execution
│   │       ├── it should store the executeAfter time
│   │       └── it should emit an ExecutionRequested event
│   └── when the receiver is the owner
│       ├── it should store the execution
│       ├── it should store the executeAfter time
│       └── it should emit an ExecutionRequested event
└── when calldata length is 0
    ├── when the target is not the owner
    │   └── it should revert
    └── when the target is the owner
        ├── it should store the execution
        ├── it should store the executeAfter time
        └── it should emit an ExecutionRequested event


ColdStorageHook::preCheck
├── when function is execute
│   └── it should revert
├── when function is executeBatch
│   └── it should revert
├── when function is executeBatchFromExecutor
│   └── it should revert
├── when function is installModule
│   └── it should revert
├── when function is uninstallModule
│   └── it should revert
├── when function is unknown
│   ├── when function is a flashloan function
│   │   └── it should return pass
│   └── when function is not a flashloan function
│       └── it should revert
└── when function is executeFromExecutor
    ├── when target is this and function is requestTimelockedExecution
    │   └── it should return requestTimelockedExecution
    └── when target is not this or function is not requestTimelockedExecution
        ├── when an execution does not exist
        │   └── it should revert
        └── when an execution exists
            ├── when the timelock is not up
            │   └── it should revert
            └── when the timelock is up
                ├── it should emit ExecutionExecuted
                └── it should return pass


ColdStorageHook::postCheck
├── when hook data is not requestTimelockedExecution or pass
│   └── it should revert
├── when hook data is requestTimelockedExecution
│    └── it should return
└── when hook data is pass
    └── it should return


ColdStorageHook::name
└── it should return ColdStorageHook


ColdStorageHook::version
└── it should return 1.0.0


ColdStorageHook::isModuleType
├── when typeID is 4
│   └── it should return true
└── when typeID is not 4
    └── it should return false