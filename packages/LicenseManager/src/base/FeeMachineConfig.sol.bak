// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "./LicenseManagerBase.sol";

abstract contract FeeMachineConfig is LicenseManagerBase {
    error UnauthorizedFeeMachine();

    event NewFeeMachine(IFeeMachine newFeeMachine);

    modifier onlyFeeMachine(address module) {
        if (msg.sender != address($module[module].feeMachine)) revert UnauthorizedFeeMachine();
        _;
    }

    function _setFeeMachine(address module, IFeeMachine newFeeMachine) internal {
        $module[module].feeMachine = newFeeMachine;
        emit NewFeeMachine(newFeeMachine);
    }

    function transferFeeMachine(
        address module,
        IFeeMachine newFeeMachine
    )
        external
        onlyFeeMachine(module)
    {
        _setFeeMachine({ module: module, newFeeMachine: newFeeMachine });
    }
}
